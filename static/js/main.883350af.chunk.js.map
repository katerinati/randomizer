{"version":3,"sources":["AddChoice.js","ChoicesList.js","App.js","serviceWorker.js","index.js"],"names":["AddChoice","onAddBtnClick","inputRef","useRef","handleClick","useCallback","inputEl","current","value","length","className","type","ref","onClick","ChoicesList","choices","removeChoice","useState","randomChoice","setRandomChoice","chosenEl","Math","floor","random","map","choice","key","aria-role","aria-label","onChange","App","setChoices","useEffect","choicesFromLS","localStorage","getItem","JSON","parse","addNewChoice","newChoice","updatedChoices","setItem","stringify","indexToRemove","findIndex","el","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QA2BeA,G,YAvBG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACZC,EAAWC,iBAAO,MAElBC,EAAcC,uBAAY,WAC9B,IAAMC,EAAUJ,EAASK,QAErBD,GAAWA,EAAQE,MAAMC,SAC3BR,EAAcK,EAAQE,OACtBF,EAAQE,MAAQ,MAEjB,CAACP,IAGJ,OACE,8BACE,yBAAKS,UAAU,kBACb,2BAAOA,UAAU,cAAcC,KAAK,OAAOC,IAAKV,IAChD,4BAAQQ,UAAU,SAASC,KAAK,SAASE,QAAST,GAAlD,wDC2BOU,G,MA7CK,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aAAkB,EACPC,mBAAS,IADF,mBACxCC,EADwC,KAC1BC,EAD0B,KAIzCf,EAAcC,uBAAY,WAC9B,IAAMe,EAAWL,EAAQM,KAAKC,MAAMD,KAAKE,SAAWR,EAAQN,SAE5DU,EAAgBC,KACf,CAACL,EAASI,IAEb,OACE,6BACE,wBAAIT,UAAU,eAEVK,EAAQS,KAAI,SAAAC,GAAM,OAEhBP,IAAiBO,EACf,yBAAKf,UAAU,cAAcgB,IAAKD,GAEhC,4BACGP,GAEH,uBAAGR,UAAU,aAAaiB,YAAU,eAAeC,aAAW,wBAC9D,2BAAOjB,KAAK,WAAYkB,SAAU,kBAAMb,EAAaS,OAIvD,wBAAIC,IAAKD,GACNA,EACD,2BAAOd,KAAK,WAAWkB,SAAU,kBAAMb,EAAaS,WAM9D,yBAAKf,UAAU,gBAEXK,EAAQN,QAAU,GAElB,4BAAQC,UAAU,YAAYC,KAAK,SAASE,QAAST,GAArD,kDCGK0B,EAxCH,WACV,IADgB,EAEcb,mBAAS,IAFvB,mBAETF,EAFS,KAEAgB,EAFA,KAIhBC,qBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAJd,WAMrBJ,EAAWK,KAAKC,MAAMJ,IAAkB,MACvC,CAPoB,YASvB,IAAMK,EAAejC,uBAAY,SAACkC,GAC9B,IAAMC,EAAc,sBAAOzB,GAAP,CAAgBwB,IAEpCR,EAAWS,GACXN,aAAaO,QAbM,UAakBL,KAAKM,UAAUF,MAErD,CAACzB,IAEEC,EAAeX,uBAAY,SAACoB,GAChC,IAAMkB,EAAgB5B,EAAQ6B,WAAU,SAACC,GAAD,OACtCA,IAAOpB,KAEDe,EAAc,YAAOzB,GACzByB,EAAeM,OAAOH,EAAe,GACzCZ,EAAWS,GACXN,aAAaO,QAxBQ,UAwBgBL,KAAKM,UAAUF,OAItD,OACE,oCACE,wBAAI9B,UAAU,UAAd,sEACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAWT,cAAeqC,IAC1B,kBAAC,EAAD,CAAavB,QAASA,EAASC,aAAcA,OC3BjC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.883350af.chunk.js","sourcesContent":["import React, {useCallback,useRef} from \"react\";\nimport './styles/AddChoice.css'\n\n\nconst AddChoice = ({onAddBtnClick}) => {\n  const inputRef = useRef(null);\n\n  const handleClick = useCallback(() => {\n    const inputEl = inputRef.current;\n\n    if (inputEl && inputEl.value.length) {\n      onAddBtnClick(inputEl.value);\n      inputEl.value = \"\";\n    }\n  }, [onAddBtnClick]);\n\n\n  return (\n    <form>\n      <div className=\"inputContainer\">\n        <input className=\"choiceInput\" type=\"text\" ref={inputRef}/>\n        <button className=\"addBtn\" type='button' onClick={handleClick}>Добавить</button>\n      </div>\n    </form>\n  )\n};\n\nexport default AddChoice;","import React, {useState, useCallback} from \"react\";\nimport \"./styles/ChoicesList.css\"\n\nconst ChoicesList = ({choices, removeChoice}) => {\n  const [randomChoice, setRandomChoice] = useState(\"\");\n\n\n  const handleClick = useCallback(() => {\n    const chosenEl = choices[Math.floor(Math.random() * choices.length)];\n\n    setRandomChoice(chosenEl)\n  }, [choices, setRandomChoice]);\n\n  return (\n    <div>\n      <ol className=\"choicesList\">\n        {\n          choices.map(choice => (\n            //key is not implemented yet\n            randomChoice === choice ?\n              <div className=\"highlighted\" key={choice}>\n\n                <li>\n                  {randomChoice}\n                </li>\n                <i className=\"em em-clap\" aria-role=\"presentation\" aria-label=\"CLAPPING HANDS SIGN\"/>\n                <input type=\"checkbox\"  onChange={() => removeChoice(choice)}/>\n              </div>\n              :\n\n              <li key={choice}>\n                {choice}\n                <input type=\"checkbox\" onChange={() => removeChoice(choice)}/>\n              </li>\n          ))\n        }\n\n      </ol>\n      <div className=\"btnContainer\">\n        {\n          choices.length >= 2\n          &&\n          <button className=\"chooseBtn\" type=\"button\" onClick={handleClick}>Выбрать</button>\n        }\n      </div>\n    </div>\n  )\n};\nexport default ChoicesList\n","import React, {useCallback, useEffect, useState} from 'react';\nimport './styles/App.css';\nimport AddChoice from \"./AddChoice\";\nimport ChoicesList from \"./ChoicesList\";\n\nconst App = () => {\n  const CHOICES_LS_KEY = \"choices\";\n  const [choices, setChoices] = useState([]);\n\n  useEffect(() => {\n    const choicesFromLS = localStorage.getItem(CHOICES_LS_KEY);\n\n    setChoices(JSON.parse(choicesFromLS) || [])\n  }, [CHOICES_LS_KEY]);\n\n  const addNewChoice = useCallback((newChoice) => {\n      const updatedChoices = [...choices, newChoice];\n\n      setChoices(updatedChoices);\n      localStorage.setItem(CHOICES_LS_KEY, JSON.stringify(updatedChoices))\n\n  }, [choices]);\n\n  const removeChoice = useCallback((choice) => {\n    const indexToRemove = choices.findIndex((el) => (\n      el === choice\n    ))\n      const updatedChoices = [...choices]\n        updatedChoices.splice(indexToRemove, 1)\n    setChoices(updatedChoices);\n    localStorage.setItem(CHOICES_LS_KEY, JSON.stringify(updatedChoices))\n\n  });\n\n  return (\n    <>\n      <h1 className=\"header\">Рандомайзер</h1>\n      <div className=\"container\">\n        <AddChoice onAddBtnClick={addNewChoice}/>\n        <ChoicesList choices={choices} removeChoice={removeChoice}/>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}